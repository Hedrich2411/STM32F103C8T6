
Interrupciones.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000036c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800049c  080004a4  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800049c  0800049c  000104a4  2**0
                  CONTENTS
  4 .ARM          00000000  0800049c  0800049c  000104a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800049c  080004a4  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000104a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004a4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004a4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000104a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d19  00000000  00000000  000104cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003f0  00000000  00000000  000111e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000115d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00011698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100c2  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001070  00000000  00000000  000217e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000548d7  00000000  00000000  00022852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00077129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001b0  00000000  00000000  0007717c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000484 	.word	0x08000484

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000484 	.word	0x08000484

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80001a8:	b480      	push	{r7}
 80001aa:	b083      	sub	sp, #12
 80001ac:	af00      	add	r7, sp, #0
 80001ae:	4603      	mov	r3, r0
 80001b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001b6:	2b00      	cmp	r3, #0
 80001b8:	db0c      	blt.n	80001d4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001ba:	79fb      	ldrb	r3, [r7, #7]
 80001bc:	f003 021f 	and.w	r2, r3, #31
 80001c0:	4907      	ldr	r1, [pc, #28]	; (80001e0 <__NVIC_ClearPendingIRQ+0x38>)
 80001c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c6:	095b      	lsrs	r3, r3, #5
 80001c8:	2001      	movs	r0, #1
 80001ca:	fa00 f202 	lsl.w	r2, r0, r2
 80001ce:	3360      	adds	r3, #96	; 0x60
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001d4:	bf00      	nop
 80001d6:	370c      	adds	r7, #12
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	e000e100 	.word	0xe000e100

080001e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	6039      	str	r1, [r7, #0]
 80001ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	db0a      	blt.n	800020e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001f8:	683b      	ldr	r3, [r7, #0]
 80001fa:	b2da      	uxtb	r2, r3
 80001fc:	490c      	ldr	r1, [pc, #48]	; (8000230 <__NVIC_SetPriority+0x4c>)
 80001fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000202:	0112      	lsls	r2, r2, #4
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	440b      	add	r3, r1
 8000208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800020c:	e00a      	b.n	8000224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4908      	ldr	r1, [pc, #32]	; (8000234 <__NVIC_SetPriority+0x50>)
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	f003 030f 	and.w	r3, r3, #15
 800021a:	3b04      	subs	r3, #4
 800021c:	0112      	lsls	r2, r2, #4
 800021e:	b2d2      	uxtb	r2, r2
 8000220:	440b      	add	r3, r1
 8000222:	761a      	strb	r2, [r3, #24]
}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	bc80      	pop	{r7}
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	e000e100 	.word	0xe000e100
 8000234:	e000ed00 	.word	0xe000ed00

08000238 <main>:

void EXT_Init(void);
void GPIO_init(void);

int main(void)
{	Clock_config();
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
 800023c:	f000 f87a 	bl	8000334 <Clock_config>
	GPIO_init();
 8000240:	f000 f838 	bl	80002b4 <GPIO_init>
	EXT_Init();
 8000244:	f000 f802 	bl	800024c <EXT_Init>

	while(1){
 8000248:	e7fe      	b.n	8000248 <main+0x10>
	...

0800024c <EXT_Init>:


	}
}

void EXT_Init(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0

	//HABILITA AFIO CLOCK
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <EXT_Init+0x5c>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a14      	ldr	r2, [pc, #80]	; (80002a8 <EXT_Init+0x5c>)
 8000256:	f043 0301 	orr.w	r3, r3, #1
 800025a:	6193      	str	r3, [r2, #24]
	//PA0->EXT0
	AFIO->EXTICR[0] &=~(AFIO_EXTICR1_EXTI0);
 800025c:	4b13      	ldr	r3, [pc, #76]	; (80002ac <EXT_Init+0x60>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a12      	ldr	r2, [pc, #72]	; (80002ac <EXT_Init+0x60>)
 8000262:	f023 030f 	bic.w	r3, r3, #15
 8000266:	6093      	str	r3, [r2, #8]
	AFIO->EXTICR[0] |= AFIO_EXTICR1_EXTI0_PA;
 8000268:	4b10      	ldr	r3, [pc, #64]	; (80002ac <EXT_Init+0x60>)
 800026a:	4a10      	ldr	r2, [pc, #64]	; (80002ac <EXT_Init+0x60>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	6093      	str	r3, [r2, #8]
	//NO ENMASCARAR EXTI0
	EXTI->IMR |= EXTI_IMR_MR0;
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <EXT_Init+0x64>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a0e      	ldr	r2, [pc, #56]	; (80002b0 <EXT_Init+0x64>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]
	//MODO FLANCO DE SUBIDA
	EXTI->RTSR |= EXTI_RTSR_RT0;
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <EXT_Init+0x64>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <EXT_Init+0x64>)
 8000282:	f043 0301 	orr.w	r3, r3, #1
 8000286:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(EXTI_FTSR_FT0);
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <EXT_Init+0x64>)
 800028a:	68db      	ldr	r3, [r3, #12]
 800028c:	4a08      	ldr	r2, [pc, #32]	; (80002b0 <EXT_Init+0x64>)
 800028e:	f023 0301 	bic.w	r3, r3, #1
 8000292:	60d3      	str	r3, [r2, #12]

	NVIC_SetPriority(EXTI0_IRQn,1);
 8000294:	2101      	movs	r1, #1
 8000296:	2006      	movs	r0, #6
 8000298:	f7ff ffa4 	bl	80001e4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI0_IRQn);
 800029c:	2006      	movs	r0, #6
 800029e:	f7ff ff67 	bl	8000170 <__NVIC_EnableIRQ>
}
 80002a2:	bf00      	nop
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	40010000 	.word	0x40010000
 80002b0:	40010400 	.word	0x40010400

080002b4 <GPIO_init>:

void GPIO_init(void){
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0

	//HABILITA CLOCK DEL PUERTO A
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80002b8:	4b10      	ldr	r3, [pc, #64]	; (80002fc <GPIO_init+0x48>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <GPIO_init+0x48>)
 80002be:	f043 0304 	orr.w	r3, r3, #4
 80002c2:	6193      	str	r3, [r2, #24]
	//PA1->SALIDA PUSH PULL
	GPIOA->CRL &=~ (GPIO_CRL_CNF1 | GPIO_CRL_MODE1);
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <GPIO_init+0x4c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <GPIO_init+0x4c>)
 80002ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002ce:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE1;
 80002d0:	4b0b      	ldr	r3, [pc, #44]	; (8000300 <GPIO_init+0x4c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <GPIO_init+0x4c>)
 80002d6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80002da:	6013      	str	r3, [r2, #0]
	//PA0->ENTRADA
	GPIOA->CRL &=~ (GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80002dc:	4b08      	ldr	r3, [pc, #32]	; (8000300 <GPIO_init+0x4c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a07      	ldr	r2, [pc, #28]	; (8000300 <GPIO_init+0x4c>)
 80002e2:	f023 030f 	bic.w	r3, r3, #15
 80002e6:	6013      	str	r3, [r2, #0]
	//MODO FLOATING INPUT
	GPIOA->CRL |= GPIO_CRL_CNF0_0;
 80002e8:	4b05      	ldr	r3, [pc, #20]	; (8000300 <GPIO_init+0x4c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a04      	ldr	r2, [pc, #16]	; (8000300 <GPIO_init+0x4c>)
 80002ee:	f043 0304 	orr.w	r3, r3, #4
 80002f2:	6013      	str	r3, [r2, #0]

}
 80002f4:	bf00      	nop
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bc80      	pop	{r7}
 80002fa:	4770      	bx	lr
 80002fc:	40021000 	.word	0x40021000
 8000300:	40010800 	.word	0x40010800

08000304 <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void){
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(EXTI0_IRQn);
 8000308:	2006      	movs	r0, #6
 800030a:	f7ff ff4d 	bl	80001a8 <__NVIC_ClearPendingIRQ>
	EXTI->PR |= EXTI_PR_PR0;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <EXTI0_IRQHandler+0x28>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a06      	ldr	r2, [pc, #24]	; (800032c <EXTI0_IRQHandler+0x28>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6153      	str	r3, [r2, #20]
	GPIOA->ODR ^= GPIO_ODR_ODR1;
 800031a:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI0_IRQHandler+0x2c>)
 800031c:	68db      	ldr	r3, [r3, #12]
 800031e:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI0_IRQHandler+0x2c>)
 8000320:	f083 0302 	eor.w	r3, r3, #2
 8000324:	60d3      	str	r3, [r2, #12]

}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40010400 	.word	0x40010400
 8000330:	40010800 	.word	0x40010800

08000334 <Clock_config>:
 *      Author: Vland
 */

#include "rcc_config.h"

void Clock_config(void){
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0

	//TIPO DE OSCILADOR
	RCC->CR |= RCC_CR_HSEON; // Cristal Externo -> 8MHz
 8000338:	4b26      	ldr	r3, [pc, #152]	; (80003d4 <Clock_config+0xa0>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a25      	ldr	r2, [pc, #148]	; (80003d4 <Clock_config+0xa0>)
 800033e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000342:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0);//Indica si el oscilador es estable
 8000344:	bf00      	nop
 8000346:	4b23      	ldr	r3, [pc, #140]	; (80003d4 <Clock_config+0xa0>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <Clock_config+0x12>

	RCC->CR &= RCC_CR_PLLON;//Desactiva el pll
 8000352:	4b20      	ldr	r3, [pc, #128]	; (80003d4 <Clock_config+0xa0>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a1f      	ldr	r2, [pc, #124]	; (80003d4 <Clock_config+0xa0>)
 8000358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800035c:	6013      	str	r3, [r2, #0]

	//LECTURA MEMORIA FLASH
	FLASH->ACR &= ~(FLASH_ACR_LATENCY); //Se limpia
 800035e:	4b1e      	ldr	r3, [pc, #120]	; (80003d8 <Clock_config+0xa4>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a1d      	ldr	r2, [pc, #116]	; (80003d8 <Clock_config+0xa4>)
 8000364:	f023 0307 	bic.w	r3, r3, #7
 8000368:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_0;// Para 8Mhz
 800036a:	4b1b      	ldr	r3, [pc, #108]	; (80003d8 <Clock_config+0xa4>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <Clock_config+0xa4>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE; //Habilita el PREFETCH
 8000376:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <Clock_config+0xa4>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a17      	ldr	r2, [pc, #92]	; (80003d8 <Clock_config+0xa4>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6013      	str	r3, [r2, #0]

	//MODO DE CONFIGURACIÓN
	RCC->CFGR &= ~(RCC_CFGR_SW); //Se limpia
 8000382:	4b14      	ldr	r3, [pc, #80]	; (80003d4 <Clock_config+0xa0>)
 8000384:	685b      	ldr	r3, [r3, #4]
 8000386:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <Clock_config+0xa0>)
 8000388:	f023 0303 	bic.w	r3, r3, #3
 800038c:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_0; //Selecciona HSE
 800038e:	4b11      	ldr	r3, [pc, #68]	; (80003d4 <Clock_config+0xa0>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4a10      	ldr	r2, [pc, #64]	; (80003d4 <Clock_config+0xa0>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6053      	str	r3, [r2, #4]

	// AHB
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 800039a:	4b0e      	ldr	r3, [pc, #56]	; (80003d4 <Clock_config+0xa0>)
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	4a0d      	ldr	r2, [pc, #52]	; (80003d4 <Clock_config+0xa0>)
 80003a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80003a4:	6053      	str	r3, [r2, #4]
	// APB1
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80003a6:	4b0b      	ldr	r3, [pc, #44]	; (80003d4 <Clock_config+0xa0>)
 80003a8:	685b      	ldr	r3, [r3, #4]
 80003aa:	4a0a      	ldr	r2, [pc, #40]	; (80003d4 <Clock_config+0xa0>)
 80003ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80003b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80003b2:	4b08      	ldr	r3, [pc, #32]	; (80003d4 <Clock_config+0xa0>)
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	4a07      	ldr	r2, [pc, #28]	; (80003d4 <Clock_config+0xa0>)
 80003b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003bc:	6053      	str	r3, [r2, #4]
	// APB2
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80003be:	4b05      	ldr	r3, [pc, #20]	; (80003d4 <Clock_config+0xa0>)
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <Clock_config+0xa0>)
 80003c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80003c8:	6053      	str	r3, [r2, #4]

}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	40022000 	.word	0x40022000

080003dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003e8:	480d      	ldr	r0, [pc, #52]	; (8000420 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003ec:	f7ff fff6 	bl	80003dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f0:	480c      	ldr	r0, [pc, #48]	; (8000424 <LoopForever+0x6>)
  ldr r1, =_edata
 80003f2:	490d      	ldr	r1, [pc, #52]	; (8000428 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003f4:	4a0d      	ldr	r2, [pc, #52]	; (800042c <LoopForever+0xe>)
  movs r3, #0
 80003f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003f8:	e002      	b.n	8000400 <LoopCopyDataInit>

080003fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003fe:	3304      	adds	r3, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000400:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000402:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000404:	d3f9      	bcc.n	80003fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000406:	4a0a      	ldr	r2, [pc, #40]	; (8000430 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000408:	4c0a      	ldr	r4, [pc, #40]	; (8000434 <LoopForever+0x16>)
  movs r3, #0
 800040a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800040c:	e001      	b.n	8000412 <LoopFillZerobss>

0800040e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800040e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000410:	3204      	adds	r2, #4

08000412 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000412:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000414:	d3fb      	bcc.n	800040e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000416:	f000 f811 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800041a:	f7ff ff0d 	bl	8000238 <main>

0800041e <LoopForever>:

LoopForever:
    b LoopForever
 800041e:	e7fe      	b.n	800041e <LoopForever>
  ldr   r0, =_estack
 8000420:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000428:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800042c:	080004a4 	.word	0x080004a4
  ldr r2, =_sbss
 8000430:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000434:	2000001c 	.word	0x2000001c

08000438 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000438:	e7fe      	b.n	8000438 <ADC1_2_IRQHandler>
	...

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	2600      	movs	r6, #0
 8000440:	4d0c      	ldr	r5, [pc, #48]	; (8000474 <__libc_init_array+0x38>)
 8000442:	4c0d      	ldr	r4, [pc, #52]	; (8000478 <__libc_init_array+0x3c>)
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	10a4      	asrs	r4, r4, #2
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	f000 f81a 	bl	8000484 <_init>
 8000450:	2600      	movs	r6, #0
 8000452:	4d0a      	ldr	r5, [pc, #40]	; (800047c <__libc_init_array+0x40>)
 8000454:	4c0a      	ldr	r4, [pc, #40]	; (8000480 <__libc_init_array+0x44>)
 8000456:	1b64      	subs	r4, r4, r5
 8000458:	10a4      	asrs	r4, r4, #2
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	0800049c 	.word	0x0800049c
 8000478:	0800049c 	.word	0x0800049c
 800047c:	0800049c 	.word	0x0800049c
 8000480:	080004a0 	.word	0x080004a0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
