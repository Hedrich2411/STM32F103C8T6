
Systick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000290  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  4 .ARM          00000000  080003c0  080003c0  000103c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c0  080003c8  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c0  080003c0  000103c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003c8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003c8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000080b  00000000  00000000  000103f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000037b  00000000  00000000  00010bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00011020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100c2  00000000  00000000  00011090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000101f  00000000  00000000  00021152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054594  00000000  00000000  00022171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00076705  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000150  00000000  00000000  00076758  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080003a8 	.word	0x080003a8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080003a8 	.word	0x080003a8

08000170 <main>:
void GPIO_init(void);
void SysTick_ClockConfig(uint32_t systick_valor);
void Delay_ms(uint32_t time);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	Clock_config();
 8000174:	f000 f870 	bl	8000258 <Clock_config>
	GPIO_init();
 8000178:	f000 f812 	bl	80001a0 <GPIO_init>
	//PARA 8MHz->1MILISEGUNDO
	SysTick_ClockConfig(8000);
 800017c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000180:	f000 f82a 	bl	80001d8 <SysTick_ClockConfig>


	while(1){

		GPIOA->ODR ^= GPIO_ODR_ODR0;
 8000184:	4b05      	ldr	r3, [pc, #20]	; (800019c <main+0x2c>)
 8000186:	68db      	ldr	r3, [r3, #12]
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <main+0x2c>)
 800018a:	f083 0301 	eor.w	r3, r3, #1
 800018e:	60d3      	str	r3, [r2, #12]
		Delay_ms(1000);
 8000190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000194:	f000 f83c 	bl	8000210 <Delay_ms>
		GPIOA->ODR ^= GPIO_ODR_ODR0;
 8000198:	e7f4      	b.n	8000184 <main+0x14>
 800019a:	bf00      	nop
 800019c:	40010800 	.word	0x40010800

080001a0 <GPIO_init>:

	}
}

void GPIO_init(void){
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0

	//HABILITA CLOCK DEL PUERTO A
	RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 80001a4:	4b0a      	ldr	r3, [pc, #40]	; (80001d0 <GPIO_init+0x30>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	4a09      	ldr	r2, [pc, #36]	; (80001d0 <GPIO_init+0x30>)
 80001aa:	f043 0304 	orr.w	r3, r3, #4
 80001ae:	6193      	str	r3, [r2, #24]
	//PA0->SALIDA PUSH PULL
	GPIOA->CRL &=~ (GPIO_CRL_CNF0 | GPIO_CRL_MODE0);
 80001b0:	4b08      	ldr	r3, [pc, #32]	; (80001d4 <GPIO_init+0x34>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <GPIO_init+0x34>)
 80001b6:	f023 030f 	bic.w	r3, r3, #15
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= GPIO_CRL_MODE0;
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <GPIO_init+0x34>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <GPIO_init+0x34>)
 80001c2:	f043 0303 	orr.w	r3, r3, #3
 80001c6:	6013      	str	r3, [r2, #0]

}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr
 80001d0:	40021000 	.word	0x40021000
 80001d4:	40010800 	.word	0x40010800

080001d8 <SysTick_ClockConfig>:

void SysTick_ClockConfig(uint32_t systick_valor){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
	//LIMPIA REGISTRO CTRL
	SysTick->CTRL = 0;
 80001e0:	4b0a      	ldr	r3, [pc, #40]	; (800020c <SysTick_ClockConfig+0x34>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
	//CARGA EL VALOR A LOAD
	SysTick->LOAD = systick_valor-1;
 80001e6:	4a09      	ldr	r2, [pc, #36]	; (800020c <SysTick_ClockConfig+0x34>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	3b01      	subs	r3, #1
 80001ec:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 80001ee:	4b07      	ldr	r3, [pc, #28]	; (800020c <SysTick_ClockConfig+0x34>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	609a      	str	r2, [r3, #8]
	//HABILITAMOS CONTADOR Y FUENTE DE CLOCK->AHB
	SysTick->CTRL |=(SysTick_CTRL_ENABLE_Msk | SysTick_CTRL_CLKSOURCE_Msk);
 80001f4:	4b05      	ldr	r3, [pc, #20]	; (800020c <SysTick_ClockConfig+0x34>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a04      	ldr	r2, [pc, #16]	; (800020c <SysTick_ClockConfig+0x34>)
 80001fa:	f043 0305 	orr.w	r3, r3, #5
 80001fe:	6013      	str	r3, [r2, #0]

}
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e010 	.word	0xe000e010

08000210 <Delay_ms>:

void Delay_ms(uint32_t time){
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]

	for (int i=0; i<time; i++){
 8000218:	2300      	movs	r3, #0
 800021a:	60fb      	str	r3, [r7, #12]
 800021c:	e010      	b.n	8000240 <Delay_ms+0x30>
		//ESPERA HASTA QUE LA BANDERA ESTE EN 1
		while(~SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk);
 800021e:	bf00      	nop
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <Delay_ms+0x44>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	43db      	mvns	r3, r3
 8000226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800022a:	2b00      	cmp	r3, #0
 800022c:	d1f8      	bne.n	8000220 <Delay_ms+0x10>
		//LIMPIAMOS BANDERA
		SysTick->CTRL &= ~(SysTick_CTRL_COUNTFLAG_Msk);
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <Delay_ms+0x44>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a08      	ldr	r2, [pc, #32]	; (8000254 <Delay_ms+0x44>)
 8000234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000238:	6013      	str	r3, [r2, #0]
	for (int i=0; i<time; i++){
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	3301      	adds	r3, #1
 800023e:	60fb      	str	r3, [r7, #12]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	687a      	ldr	r2, [r7, #4]
 8000244:	429a      	cmp	r2, r3
 8000246:	d8ea      	bhi.n	800021e <Delay_ms+0xe>
	}

}
 8000248:	bf00      	nop
 800024a:	bf00      	nop
 800024c:	3714      	adds	r7, #20
 800024e:	46bd      	mov	sp, r7
 8000250:	bc80      	pop	{r7}
 8000252:	4770      	bx	lr
 8000254:	e000e010 	.word	0xe000e010

08000258 <Clock_config>:
 *      Author: Vland
 */

#include "rcc_config.h"

void Clock_config(void){
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0

	//TIPO DE OSCILADOR
	RCC->CR |= RCC_CR_HSEON; // Cristal Externo -> 8MHz
 800025c:	4b26      	ldr	r3, [pc, #152]	; (80002f8 <Clock_config+0xa0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a25      	ldr	r2, [pc, #148]	; (80002f8 <Clock_config+0xa0>)
 8000262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000266:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_HSERDY) == 0);//Indica si el oscilador es estable
 8000268:	bf00      	nop
 800026a:	4b23      	ldr	r3, [pc, #140]	; (80002f8 <Clock_config+0xa0>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f9      	beq.n	800026a <Clock_config+0x12>

	RCC->CR &= RCC_CR_PLLON;//Desactiva el pll
 8000276:	4b20      	ldr	r3, [pc, #128]	; (80002f8 <Clock_config+0xa0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a1f      	ldr	r2, [pc, #124]	; (80002f8 <Clock_config+0xa0>)
 800027c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000280:	6013      	str	r3, [r2, #0]

	//LECTURA MEMORIA FLASH
	FLASH->ACR &= ~(FLASH_ACR_LATENCY); //Se limpia
 8000282:	4b1e      	ldr	r3, [pc, #120]	; (80002fc <Clock_config+0xa4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a1d      	ldr	r2, [pc, #116]	; (80002fc <Clock_config+0xa4>)
 8000288:	f023 0307 	bic.w	r3, r3, #7
 800028c:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_0;// Para 8Mhz
 800028e:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <Clock_config+0xa4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	4a1a      	ldr	r2, [pc, #104]	; (80002fc <Clock_config+0xa4>)
 8000294:	f043 0301 	orr.w	r3, r3, #1
 8000298:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_PRFTBE; //Habilita el PREFETCH
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <Clock_config+0xa4>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	4a17      	ldr	r2, [pc, #92]	; (80002fc <Clock_config+0xa4>)
 80002a0:	f043 0310 	orr.w	r3, r3, #16
 80002a4:	6013      	str	r3, [r2, #0]

	//MODO DE CONFIGURACIÓN
	RCC->CFGR &= ~(RCC_CFGR_SW); //Se limpia
 80002a6:	4b14      	ldr	r3, [pc, #80]	; (80002f8 <Clock_config+0xa0>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a13      	ldr	r2, [pc, #76]	; (80002f8 <Clock_config+0xa0>)
 80002ac:	f023 0303 	bic.w	r3, r3, #3
 80002b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_0; //Selecciona HSE
 80002b2:	4b11      	ldr	r3, [pc, #68]	; (80002f8 <Clock_config+0xa0>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a10      	ldr	r2, [pc, #64]	; (80002f8 <Clock_config+0xa0>)
 80002b8:	f043 0301 	orr.w	r3, r3, #1
 80002bc:	6053      	str	r3, [r2, #4]

	// AHB
	RCC->CFGR &= ~(RCC_CFGR_HPRE);
 80002be:	4b0e      	ldr	r3, [pc, #56]	; (80002f8 <Clock_config+0xa0>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a0d      	ldr	r2, [pc, #52]	; (80002f8 <Clock_config+0xa0>)
 80002c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002c8:	6053      	str	r3, [r2, #4]
	// APB1
	RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 80002ca:	4b0b      	ldr	r3, [pc, #44]	; (80002f8 <Clock_config+0xa0>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a0a      	ldr	r2, [pc, #40]	; (80002f8 <Clock_config+0xa0>)
 80002d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002d4:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <Clock_config+0xa0>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a07      	ldr	r2, [pc, #28]	; (80002f8 <Clock_config+0xa0>)
 80002dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e0:	6053      	str	r3, [r2, #4]
	// APB2
	RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 80002e2:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <Clock_config+0xa0>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <Clock_config+0xa0>)
 80002e8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80002ec:	6053      	str	r3, [r2, #4]

}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bc80      	pop	{r7}
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40021000 	.word	0x40021000
 80002fc:	40022000 	.word	0x40022000

08000300 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	bc80      	pop	{r7}
 800030a:	4770      	bx	lr

0800030c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800030c:	480d      	ldr	r0, [pc, #52]	; (8000344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000310:	f7ff fff6 	bl	8000300 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000314:	480c      	ldr	r0, [pc, #48]	; (8000348 <LoopForever+0x6>)
  ldr r1, =_edata
 8000316:	490d      	ldr	r1, [pc, #52]	; (800034c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000318:	4a0d      	ldr	r2, [pc, #52]	; (8000350 <LoopForever+0xe>)
  movs r3, #0
 800031a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800031c:	e002      	b.n	8000324 <LoopCopyDataInit>

0800031e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000322:	3304      	adds	r3, #4

08000324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000328:	d3f9      	bcc.n	800031e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032a:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <LoopForever+0x16>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000330:	e001      	b.n	8000336 <LoopFillZerobss>

08000332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000334:	3204      	adds	r2, #4

08000336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000338:	d3fb      	bcc.n	8000332 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033a:	f000 f811 	bl	8000360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033e:	f7ff ff17 	bl	8000170 <main>

08000342 <LoopForever>:

LoopForever:
    b LoopForever
 8000342:	e7fe      	b.n	8000342 <LoopForever>
  ldr   r0, =_estack
 8000344:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800034c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000350:	080003c8 	.word	0x080003c8
  ldr r2, =_sbss
 8000354:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000358:	2000001c 	.word	0x2000001c

0800035c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800035c:	e7fe      	b.n	800035c <ADC1_2_IRQHandler>
	...

08000360 <__libc_init_array>:
 8000360:	b570      	push	{r4, r5, r6, lr}
 8000362:	2600      	movs	r6, #0
 8000364:	4d0c      	ldr	r5, [pc, #48]	; (8000398 <__libc_init_array+0x38>)
 8000366:	4c0d      	ldr	r4, [pc, #52]	; (800039c <__libc_init_array+0x3c>)
 8000368:	1b64      	subs	r4, r4, r5
 800036a:	10a4      	asrs	r4, r4, #2
 800036c:	42a6      	cmp	r6, r4
 800036e:	d109      	bne.n	8000384 <__libc_init_array+0x24>
 8000370:	f000 f81a 	bl	80003a8 <_init>
 8000374:	2600      	movs	r6, #0
 8000376:	4d0a      	ldr	r5, [pc, #40]	; (80003a0 <__libc_init_array+0x40>)
 8000378:	4c0a      	ldr	r4, [pc, #40]	; (80003a4 <__libc_init_array+0x44>)
 800037a:	1b64      	subs	r4, r4, r5
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	42a6      	cmp	r6, r4
 8000380:	d105      	bne.n	800038e <__libc_init_array+0x2e>
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f855 3b04 	ldr.w	r3, [r5], #4
 8000388:	4798      	blx	r3
 800038a:	3601      	adds	r6, #1
 800038c:	e7ee      	b.n	800036c <__libc_init_array+0xc>
 800038e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000392:	4798      	blx	r3
 8000394:	3601      	adds	r6, #1
 8000396:	e7f2      	b.n	800037e <__libc_init_array+0x1e>
 8000398:	080003c0 	.word	0x080003c0
 800039c:	080003c0 	.word	0x080003c0
 80003a0:	080003c0 	.word	0x080003c0
 80003a4:	080003c4 	.word	0x080003c4

080003a8 <_init>:
 80003a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003aa:	bf00      	nop
 80003ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ae:	bc08      	pop	{r3}
 80003b0:	469e      	mov	lr, r3
 80003b2:	4770      	bx	lr

080003b4 <_fini>:
 80003b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b6:	bf00      	nop
 80003b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ba:	bc08      	pop	{r3}
 80003bc:	469e      	mov	lr, r3
 80003be:	4770      	bx	lr
